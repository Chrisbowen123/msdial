@using CompMs.App.MsdialServer.Dataset.Model
@using CompMs.App.MsdialServer.Project.Model
@using CompMs.MsdialCore.DataObj
@inject ProjectModel _project
@inject DatasetModel _dataset
@implements IDisposable

@if (_project.ProjectDataStorage.Value is not null) {
    @foreach (var parameter in _project.ProjectDataStorage.Value.ProjectParameters) {
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h6">@parameter.ProjectFileName</MudText>
                <MudSpacer/>
                <MudText Class="small">@parameter.FinalSavedDate</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText>Ion mode: @parameter.IonMode</MudText>
                <MudText>Target omics: @parameter.TargetOmics</MudText>
                <MudText>Ionization method: @parameter.Ionization</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@((e) => LoadAsync(parameter))">Load</MudButton>
            </MudCardActions>
        </MudCard>
    }
}
else {
    <MudText>No datasets loaded</MudText>
}


@code {
    private System.Reactive.Disposables.SingleAssignmentDisposable _disposable = new();

    [Parameter]
    public Action? OnLoaded { get; set; }

    Task LoadAsync(MsdialCore.Parameter.ProjectBaseParameter parameter) {
        if (_project.ProjectDataStorage.Value is ProjectDataStorage storage) {
            var idx = storage.ProjectParameters.IndexOf(parameter);
            var datasetStorage = storage.Storages[idx];
            _dataset.DatasetStorage.Value = datasetStorage;
            OnLoaded?.Invoke();
        }
        return Task.CompletedTask;
    }

    protected override void OnInitialized() {
        base.OnInitialized();
        _disposable.Disposable = _project.ProjectDataStorage.Subscribe(_ => StateHasChanged());
    }

    public void Dispose() {
        _disposable.Dispose();
    }
}

