using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;

namespace Riken.Metabolomics.NetCDF4
{
    /// <summary>
    /// wrapper for netcdf.dll
    /// </summary>
    public partial class NetCDF
    {
        /// <summary>
        /// upper limits of NetCDF file
        /// </summary>
        public enum Limits : int
        {
            /// <summary>
            /// Dimension limit
            /// </summary>
            NC_MAX_DIMS = 1024,
            /// <summary>
            /// Attribute limit
            /// </summary>
            NC_MAX_ATTRS = 8192,
            /// <summary>
            /// Variable limit
            /// </summary>
            NC_MAX_VARS = 8192,
            /// <summary>
            /// Dim,Att,Var limit
            /// </summary>
            NC_MAX_NAME = 256,
            /// <summary>
            /// Variable Dimension limit
            /// </summary>
            NC_MAX_VAR_DIMS = 1024
        }
        /// <summary>
        /// definition of NetCDF open mode
        /// </summary>
        public enum ModeOpen : int
        {
            /// <summary>
            /// Read-Only access Mode flag
            /// </summary>
            NC_NOWRITE = 0,
            /// <summary>
            /// Read-Write access Mode flag
            /// </summary>
            NC_WRITE = 0x0001,
            /// <summary>
            /// Diskless file. Mode flag
            /// </summary>
            NC_DISKLESS = 0x0008,
            /// <summary>
            /// Share updates Mode flag
            /// </summary>
            NC_SHARE = 0x0800,
            /// <summary>
            /// Turn on MPI I/O Mode flag
            /// </summary>
            NC_MPIIO = 0x2000,
            /// <summary>
            /// Turn on MPI POSIX I/O Mode flag
            /// </summary>
            NC_MPIPOSIX = 0x4000,
            /// <summary>
            /// Read from memory. Mode flag
            /// </summary>
            NC_INMEMORY = 0x8000
        }
        public enum NcType : int
        {
            /// <summary>
            /// Not A Type
            /// </summary>
            NC_NAT = 0,
            /// <summary>
            /// signed 1 byte integer
            /// </summary>
            NC_BYTE = 1,
            /// <summary>
            /// ISO/ASCII character
            /// </summary>
            NC_CHAR = 2,
            /// <summary>
            /// singned 2 byte integer
            /// </summary>
            NC_SHORT = 3,
            /// <summary>
            /// singned 4 byte integer
            /// </summary>
            NC_INT = 4,
            /// <summary>
            /// single precision floating point number
            /// </summary>
            NC_FLOAT = 5,
            /// <summary>
            /// double precision floating point number
            /// </summary>
            NC_DOUBLE = 6,
            /// <summary>
            /// unsigned 1 byte int
            /// </summary>
            NC_UBYTE = 7,
            /// <summary>
            /// unsigned 2-byte int
            /// </summary>
            NC_USHORT = 8,
            /// <summary>
            /// unsigned 4-byte int
            /// </summary>
            NC_UINT = 9,
            /// <summary>
            /// signed 8-byte int
            /// </summary>
            NC_INT64 = 10,
            /// <summary>
            /// unsigned 8-byte int
            /// </summary>
            NC_UINT64 = 11,
            /// <summary>
            /// string
            /// </summary>
            NC_STRING = 12
        }


        /// <summary>
        /// get the version of CDF file generated by netCDF writer
        /// </summary>
        /// <returns></returns>
        [DllImport("netcdf.dll")]
        public static extern string nc_inq_libvers();
        /// <summary>
        /// get error messages
        /// </summary>
        /// <param name="ncerr">error status</param>
        /// <returns></returns>
        [DllImport("netcdf.dll")]
        public static extern string nc_strerror(int ncerr);
        /// <summary>
        /// open netcdf file
        /// </summary>
        /// <param name="path">file path</param>
        /// <param name="mode">open mode</param>
        /// <param name="ncid">NCID</param>
        /// <returns></returns>
        //[DllImport("netcdf.dll")]
        [DllImport("netcdf.dll", CallingConvention = CallingConvention.StdCall)]
        public static extern int nc_open(string path, ModeOpen mode, out int ncid);
        /// <summary>
        /// netcdf close
        /// </summary>
        /// <param name="ncid">NCID</param>
        /// <returns></returns>
        [DllImport("netcdf.dll")]
        public static extern int nc_close(int ncid);
        /// <summary>
        /// NetCDF basic attributes
        /// </summary>
        /// <param name="ncid">NCID</param>
        /// <param name="ndims">#Dimension</param>
        /// <param name="nvars">#Variable</param>
        /// <param name="ngatts">#Global Attribute</param>
        /// <param name="unlimdimid">Unlimited Variable ID</param>
        /// <returns></returns>
        [DllImport("netcdf.dll")]
        public static extern int nc_inq(int ncid, out int ndims, out int nvars, out int ngatts, out int unlimdimid);
        [DllImport("netcdf.dll")]
        public static extern int nc_inq_dim(int ncid, int dimid, StringBuilder name, out int length);
        [DllImport("netcdf.dll")]
        public static extern int nc_inq_dimid(int ncid, string name, out int dimid);
        [DllImport("netcdf.dll")]
        public static extern int nc_inq_dimlen(int ncid, int dimid, out int len);
        [DllImport("netcdf.dll")]
        public static extern int nc_inq_attname(int ncid, int varid, int attnum, StringBuilder name);
        [DllImport("netcdf.dll")]
        public static extern int nc_inq_att(int ncid, int varid, string name, out NcType type, out int length);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_att_text(int ncid, int varid, string name, StringBuilder value);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_att_schar(int ncid, int varid, string name, sbyte[] data);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_att_short(int ncid, int varid, string name, short[] data);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_att_int(int ncid, int varid, string name, int[] data);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_att_float(int ncid, int varid, string name, float[] data);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_att_double(int ncid, int varid, string name, double[] data);
        [DllImport("netcdf.dll")]
        public static extern int nc_inq_var(int ncid, int varid, StringBuilder name, out NcType type, out int ndims, int[] dimids, out int natts);
        [DllImport("netcdf.dll")]
        public static extern int nc_inq_varid(int ncid, string name, out int varid);
        [DllImport("netcdf.dll")]
        public static extern int nc_inq_varndims(int ncid, int varid, out int ndims);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_var_short(int ncid, int varid, short[] dara);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_var_int(int ncid, int varid, int[] data);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_var_float(int ncid, int varid, float[] data);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_var_double(int ncid, int varid, double[] data);
        [DllImport("netcdf.dll")]
        public static extern int nc_get_var_text(int ncid, int varid, byte[] data);
    }
}

